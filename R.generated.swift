//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 4 storyboards.
  struct storyboard {
    /// Storyboard `AdopterList`.
    static let adopterList = _R.storyboard.adopterList()
    /// Storyboard `AnimalList`.
    static let animalList = _R.storyboard.animalList()
    /// Storyboard `Auth`.
    static let auth = _R.storyboard.auth()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "AdopterList", bundle: ...)`
    static func adopterList(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.adopterList)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "AnimalList", bundle: ...)`
    static func animalList(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.animalList)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Auth", bundle: ...)`
    static func auth(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.auth)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 7 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")
    /// Color `Birch`.
    static let birch = Rswift.ColorResource(bundle: R.hostingBundle, name: "Birch")
    /// Color `Chestnut`.
    static let chestnut = Rswift.ColorResource(bundle: R.hostingBundle, name: "Chestnut")
    /// Color `Colored Background`.
    static let coloredBackground = Rswift.ColorResource(bundle: R.hostingBundle, name: "Colored Background")
    /// Color `Cream`.
    static let cream = Rswift.ColorResource(bundle: R.hostingBundle, name: "Cream")
    /// Color `Dark Chocolate`.
    static let darkChocolate = Rswift.ColorResource(bundle: R.hostingBundle, name: "Dark Chocolate")
    /// Color `Wood`.
    static let wood = Rswift.ColorResource(bundle: R.hostingBundle, name: "Wood")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Birch", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func birch(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.birch, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Chestnut", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func chestnut(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.chestnut, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Colored Background", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func coloredBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.coloredBackground, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Cream", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func cream(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.cream, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Dark Chocolate", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func darkChocolate(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.darkChocolate, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Wood", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func wood(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.wood, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "Birch", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func birch(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.birch.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "Chestnut", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func chestnut(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.chestnut.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "Colored Background", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func coloredBackground(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.coloredBackground.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "Cream", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func cream(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.cream.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "Dark Chocolate", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func darkChocolate(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.darkChocolate.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "Wood", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func wood(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.wood.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")

    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 3 images.
  struct image {
    /// Image `logoVertical`.
    static let logoVertical = Rswift.ImageResource(bundle: R.hostingBundle, name: "logoVertical")
    /// Image `patternBackground`.
    static let patternBackground = Rswift.ImageResource(bundle: R.hostingBundle, name: "patternBackground")
    /// Image `placeholderImage`.
    static let placeholderImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "placeholderImage")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logoVertical", bundle: ..., traitCollection: ...)`
    static func logoVertical(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logoVertical, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "patternBackground", bundle: ..., traitCollection: ...)`
    static func patternBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.patternBackground, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "placeholderImage", bundle: ..., traitCollection: ...)`
    static func placeholderImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.placeholderImage, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = false

      struct uiSceneConfigurations {
        static let _key = "UISceneConfigurations"

        struct uiWindowSceneSessionRoleApplication {
          struct defaultConfiguration {
            static let _key = "Default Configuration"
            static let uiSceneConfigurationName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneConfigurationName") ?? "Default Configuration"
            static let uiSceneDelegateClassName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate"
            static let uiSceneStoryboardFile = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneStoryboardFile") ?? "Auth"

            fileprivate init() {}
          }

          fileprivate init() {}
        }

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 11 nibs.
  struct nib {
    /// Nib `AdopterDetailsViewController`.
    static let adopterDetailsViewController = _R.nib._AdopterDetailsViewController()
    /// Nib `AdopterListTableViewCell`.
    static let adopterListTableViewCell = _R.nib._AdopterListTableViewCell()
    /// Nib `AnimalDetailsViewController`.
    static let animalDetailsViewController = _R.nib._AnimalDetailsViewController()
    /// Nib `AnimalListTableViewCell`.
    static let animalListTableViewCell = _R.nib._AnimalListTableViewCell()
    /// Nib `CollapsibleHeaderView`.
    static let collapsibleHeaderView = _R.nib._CollapsibleHeaderView()
    /// Nib `CreateAnimalViewController`.
    static let createAnimalViewController = _R.nib._CreateAnimalViewController()
    /// Nib `DatePickerFormViewController`.
    static let datePickerFormViewController = _R.nib._DatePickerFormViewController()
    /// Nib `ImagePickerFormViewController`.
    static let imagePickerFormViewController = _R.nib._ImagePickerFormViewController()
    /// Nib `PickerFormViewController`.
    static let pickerFormViewController = _R.nib._PickerFormViewController()
    /// Nib `TextFieldFormViewController`.
    static let textFieldFormViewController = _R.nib._TextFieldFormViewController()
    /// Nib `TextViewFormViewController`.
    static let textViewFormViewController = _R.nib._TextViewFormViewController()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AdopterDetailsViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.adopterDetailsViewController) instead")
    static func adopterDetailsViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.adopterDetailsViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AdopterListTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.adopterListTableViewCell) instead")
    static func adopterListTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.adopterListTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AnimalDetailsViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.animalDetailsViewController) instead")
    static func animalDetailsViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.animalDetailsViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AnimalListTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.animalListTableViewCell) instead")
    static func animalListTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.animalListTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CollapsibleHeaderView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.collapsibleHeaderView) instead")
    static func collapsibleHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.collapsibleHeaderView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CreateAnimalViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.createAnimalViewController) instead")
    static func createAnimalViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.createAnimalViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "DatePickerFormViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.datePickerFormViewController) instead")
    static func datePickerFormViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.datePickerFormViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ImagePickerFormViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.imagePickerFormViewController) instead")
    static func imagePickerFormViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.imagePickerFormViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PickerFormViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.pickerFormViewController) instead")
    static func pickerFormViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.pickerFormViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "TextFieldFormViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.textFieldFormViewController) instead")
    static func textFieldFormViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.textFieldFormViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "TextViewFormViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.textViewFormViewController) instead")
    static func textViewFormViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.textViewFormViewController)
    }
    #endif

    static func adopterDetailsViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.adopterDetailsViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func adopterListTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AdopterListTableViewCell? {
      return R.nib.adopterListTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AdopterListTableViewCell
    }

    static func animalDetailsViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.animalDetailsViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func animalListTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AnimalListTableViewCell? {
      return R.nib.animalListTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AnimalListTableViewCell
    }

    static func collapsibleHeaderView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.collapsibleHeaderView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func createAnimalViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.createAnimalViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func datePickerFormViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.datePickerFormViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func imagePickerFormViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.imagePickerFormViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func pickerFormViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.pickerFormViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func textFieldFormViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.textFieldFormViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func textViewFormViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.textViewFormViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 3 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `AdoptTableViewCell`.
    static let adoptTableViewCell: Rswift.ReuseIdentifier<AdopterListTableViewCell> = Rswift.ReuseIdentifier(identifier: "AdoptTableViewCell")
    /// Reuse identifier `AdopterListTableViewCell`.
    static let adopterListTableViewCell: Rswift.ReuseIdentifier<AdopterListTableViewCell> = Rswift.ReuseIdentifier(identifier: "AdopterListTableViewCell")
    /// Reuse identifier `AnimalListTableViewCell`.
    static let animalListTableViewCell: Rswift.ReuseIdentifier<AnimalListTableViewCell> = Rswift.ReuseIdentifier(identifier: "AnimalListTableViewCell")

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _CollapsibleHeaderView.validate()
      try _ImagePickerFormViewController.validate()
    }

    struct _AdopterDetailsViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "AdopterDetailsViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _AdopterListTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = AdopterListTableViewCell

      let bundle = R.hostingBundle
      let identifier = "AdopterListTableViewCell"
      let name = "AdopterListTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AdopterListTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AdopterListTableViewCell
      }

      fileprivate init() {}
    }

    struct _AnimalDetailsViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "AnimalDetailsViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _AnimalListTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = AnimalListTableViewCell

      let bundle = R.hostingBundle
      let identifier = "AnimalListTableViewCell"
      let name = "AnimalListTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AnimalListTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AnimalListTableViewCell
      }

      fileprivate init() {}
    }

    struct _CollapsibleHeaderView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "CollapsibleHeaderView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "chevron.down") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'chevron.down' is used in nib 'CollapsibleHeaderView', but couldn't be loaded.") } }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _CreateAnimalViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "CreateAnimalViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _DatePickerFormViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "DatePickerFormViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _ImagePickerFormViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ImagePickerFormViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "photo.on.rectangle") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'photo.on.rectangle' is used in nib 'ImagePickerFormViewController', but couldn't be loaded.") } }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _PickerFormViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "PickerFormViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _TextFieldFormViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "TextFieldFormViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _TextViewFormViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "TextViewFormViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try adopterList.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try animalList.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try auth.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct adopterList: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = AdopterListViewController

      let bundle = R.hostingBundle
      let name = "AdopterList"

      static func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "chevron.right") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'chevron.right' is used in storyboard 'AdopterList', but couldn't be loaded.") } }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct animalList: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = AnimalListViewController

      let animalListView = StoryboardViewControllerResource<AnimalListViewController>(identifier: "AnimalListView")
      let bundle = R.hostingBundle
      let name = "AnimalList"

      func animalListView(_: Void = ()) -> AnimalListViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: animalListView)
      }

      static func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "chevron.right") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'chevron.right' is used in storyboard 'AnimalList', but couldn't be loaded.") } }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.animalList().animalListView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'animalListView' could not be loaded from storyboard 'AnimalList' as 'AnimalListViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct auth: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController

      let bundle = R.hostingBundle
      let name = "Auth"

      static func validate() throws {
        if UIKit.UIImage(named: "logoVertical", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logoVertical' is used in storyboard 'Auth', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "Cream", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Cream' is used in storyboard 'Auth', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UITabBarController

      let bundle = R.hostingBundle
      let name = "Main"

      static func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "list.bullet.rectangle") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'list.bullet.rectangle' is used in storyboard 'Main', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "text.book.closed") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'text.book.closed' is used in storyboard 'Main', but couldn't be loaded.") } }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
